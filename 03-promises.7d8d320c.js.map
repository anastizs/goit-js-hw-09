{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAmCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAO,CAAEL,WAAUC,SAEzB,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLP,EACFK,EAAQF,GAERG,EAAOH,E,GAERJ,E,IA5CMS,SAASC,cAAc,SAM/BC,iBAAiB,UAEtB,SAA0BC,GACxBA,EAAEC,iBAEF,IAAMC,EAAaC,OAAOH,EAAEI,cAAchB,MAAMiB,OAC1CC,EAAYH,OAAOH,EAAEI,cAAcG,KAAKF,OACxCG,EAAcL,OAAOH,EAAEI,cAAcK,OAAOJ,QAKpD,SAA6BjB,EAAOmB,EAAME,GACxC,IAAK,IAAIC,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EAErDxB,EAAcwB,EAAUtB,GACrBuB,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAU0B,EAAKD,EAALxB,MACjB0B,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAANJ,EAAM,M,IAEvEK,OAAM,SAAAN,G,IAAGzB,EAAQyB,EAARzB,SAAU0B,EAAKD,EAALxB,MAClB0B,EAAA9B,GAAS+B,OAAOI,QAAQ,sBAAqCF,OAAf9B,EAAS,QAAY8B,OAANJ,EAAM,M,IAGvEzB,GAASmB,C,CAdXa,CAAoBlB,EAAYI,EAAWE,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n// const delay = form.querySelector('[name=\"delay\"]');\n// const step = form.querySelector('[name=\"step\"]');\n// const amount = form.querySelector('[name=\"amount\"]');\n\n\nform.addEventListener('submit', createPromiseBtn);\n\nfunction createPromiseBtn(e) {\n  e.preventDefault();\n\n  const delayValue = Number(e.currentTarget.delay.value);\n  const stepValue = Number(e.currentTarget.step.value);\n  const amountValue = Number(e.currentTarget.amount.value);\n\n  createPromiseAction(delayValue, stepValue, amountValue);\n};\n\nfunction createPromiseAction(delay, step, amount) {\n  for (let position = 1; position <= amount; position += 1) {\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    \n    delay += step;\n  }\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const data = { position, delay };\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(data);\n      } else {\n        reject(data);\n      }\n    }, delay);\n  });\n};\n\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","data","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","delayValue","Number","currentTarget","value","stepValue","step","amountValue","amount","position1","then","param","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createPromiseAction"],"version":3,"file":"03-promises.7d8d320c.js.map"}